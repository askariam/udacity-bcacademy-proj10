// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

var Verifier = artifacts.require('Verifier');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
var proof = require('../../zokrates/code/square/proof');

contract('Verifier', accounts => {

    const account_one = accounts[0];
    //const account_two = accounts[1];

    describe('Square Verifier Test', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});

        })
    

        it('should verify using correct proof', async function () {
            let testProof = proof.proof;
            //console.log(testProof);
            let result = await this.contract.verifyTx.call(testProof.a, testProof.b, testProof.c, proof.inputs);
            //console.log(result);
            
            assert.equal(result, true, "Verifyer could not verify correct proof!");
        })

        it('should fail to verify using incorrect proof', async function () {
            let testProof = proof.proof;
            //console.log(testProof);
            let result = await this.contract.verifyTx.call(testProof.a, testProof.b, testProof.c, [proof.inputs[1], proof.inputs[0]]);
            //console.log(result);
            
            assert.equal(result, false, "Verifyer should not verify incorrect proof!");
        })

        it('should fail to verify using incorrect proof', async function () {
            let testProof = proof.proof;
            //console.log(testProof);
            let result = await this.contract.verifyTx.call(testProof.a, testProof.b, testProof.c, [15,9]);
            //console.log(result);
            
            assert.equal(result, false, "Verifyer should not verify incorrect proof!");
        })

    });
})
    
// Test verification with incorrect proof
